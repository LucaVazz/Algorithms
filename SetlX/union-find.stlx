// This class implements the union find algorithm.
unionFind := procedure(m, r) {
    parent := { [x, x] : x in m };
    height := { [x, 1] : x in m };
    for ([x, y] in r) {
        rootX := find(x, parent);
        rootY := find(y, parent);
        if (rootX != rootY) {
            if (height[rootX] < height[rootY]) {
                parent[rootX] := rootY;  
            } else if (height[rootX] > height[rootY]) {
                parent[rootY] := rootX;  
            } else {
                parent[rootY] := rootX;  
                height[rootX] += 1;
            }
        }
    }
    roots := { x : x in m | parent[x] == x };
    return { { y : y in m | find(y, parent) == r } : r in roots };
};
find := procedure(x, parent) {
    if (parent[x] == x) {
        return x;
    }
    return find(parent[x], parent);
};

demo := procedure() {
    m := { 1 .. 9 };
    r := { [1, 4], [7, 9], [3, 5], [2, 6], [5, 8], [1, 9], [4, 7] };
    print("r = $r$");
    p := unionFind(m, r);
    print("p = $p$");
};

demo();

