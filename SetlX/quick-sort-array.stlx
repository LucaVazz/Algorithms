// sort the list lst
sort := procedure(rw lst) {
    quickSort(1, #lst, lst);
};
// sort the sublist lst[a, b] in place
// a: start index, b: end index
quickSort := procedure(a, b, rw lst) {
    if (b <= a) {
        return; // at most one element, nothing to do
    }
    m := partition(a, b, lst);  // m is the split index
    quickSort(a, m - 1, lst);
    quickSort(m + 1, b, lst);
};
// Partition the sublist lst[start, end] using lst[end] as a pivot element.
// The for-loop maintains the following invariants:
// (a) forall i in {start  .. left } : lst[i] <= pivot
// (b) forall i in {left+1 .. idx-1} : pivot < lst[i]
partition := procedure(start, end, rw lst) {
    pivot := lst[end];
    left  := start - 1;
    for (idx in [start .. end-1]) {
        if (lst[idx] <= pivot) {
            left += 1;
            swap(left, idx, lst);
        }
    }
    swap(left + 1, end, lst);
    return left + 1;
};

swap := procedure(x, y, rw lst) {
    [ lst[x], lst[y] ] := [ lst[y], lst[x] ];
};

// code for testing

demo := procedure() {
    lst := [ rnd({1 .. 200}) : n in [1 .. 20] ];
    print("lst = $lst$");
    sort(lst);
    print("lst = $lst$");
};

// n iterations for lists of length k
testSort := procedure(n, k) {
    for (i in [1 .. n]) {
        lst := [ rnd({1 .. 200}) : x in [1 .. k] ];
        cpy := lst;  // save a copy
        sort(lst);
        isOrdered(lst);
        sameElements(cpy, lst);
        print(".");
    }
    print("All tests passed!");
    
};

isOrdered := procedure(lst) {
    for (i in [1 .. #lst-1]) {
        assert(lst[i] <= lst[i+1], "test lst[i] <= lst[i+1] failed for i = $i$, lst = $lst$");
    }
};

sameElements := procedure(lst, s) {
    for (x in lst) {
        assert(count(x, lst) == count(x, s), "wrong count");
    }
    assert(#lst == #s, "wrong size");
};

count := procedure(x, lst) {
    match (lst) {
        case []   : return 0;
        case [y|r]: if (x == y) {
                        return 1 + count(x, r);
                    }
                    return count(x, r);
    }
};

demo();

testSort(100, 50);



    
    
